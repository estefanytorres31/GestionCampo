generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // Cambia a "postgresql" u otro si usas otra base de datos
  url      = env("DATABASE_URL")
}

/// Enums utilizados en el esquema
enum Prioridad {
  baja
  media
  alta
}

enum EstadoOrdenTrabajo {
  pendiente
  en_progreso
  completado
  cancelado
  inactivo  // Representa el estado 0 (inactivo)
}

enum TipoAsistencia {
  entrada
  salida
}

enum RolEnOrden {
  Responsable  @map("Responsable")
  Ayudante
}

/// Modelos de Prisma
model Permiso {
  id             Int              @id @default(autoincrement())
  nombre         String           @unique @map("nombre")
  descripcion    String?
  estado         Boolean          @default(true)
  creado_en      DateTime         @default(now()) @map("creado_en")
  actualizado_en DateTime         @updatedAt @map("actualizado_en")
  roles_permisos RolesPermiso[]

  @@map("permisos")
  @@index([estado], name: "idx_permiso_estado")
}

model Rol {
  id             Int              @id @default(autoincrement())
  nombre_rol     String           @unique @map("nombre_rol")
  descripcion    String?
  estado         Boolean          @default(true)
  creado_en      DateTime         @default(now()) @map("creado_en")
  actualizado_en DateTime         @updatedAt @map("actualizado_en")
  roles_permisos RolesPermiso[]
  usuario_roles  UsuarioRol[]

  @@map("roles")
  @@index([estado], name: "idx_rol_estado")
}

model RolesPermiso {
  id             Int      @id @default(autoincrement())
  rol_id         Int      @map("rol_id")
  permiso_id     Int      @map("permiso_id")
  estado         Boolean  @default(true)
  creado_en      DateTime @default(now()) @map("creado_en")
  actualizado_en DateTime @updatedAt @map("actualizado_en") // ← Agregamos esto
  rol            Rol      @relation(fields: [rol_id], references: [id], onDelete: NoAction, onUpdate: Cascade)
  permiso        Permiso  @relation(fields: [permiso_id], references: [id], onDelete: NoAction, onUpdate: Cascade)

  @@unique([rol_id, permiso_id], name: "roles_permisos_rol_id_permiso_id_key")
  @@map("roles_permisos")
  @@index([rol_id], name: "idx_roles_permisos_rol_id")
  @@index([permiso_id], name: "idx_roles_permisos_permiso_id")
  @@index([estado], name: "idx_roles_permisos_estado")
}

model Usuario {
  id                       Int                      @id @default(autoincrement())
  nombre_usuario           String                   @unique @map("nombre_usuario")
  contrasena_hash          String                   @map("contrasena_hash")
  nombre_completo          String                   @map("nombre_completo")
  email                    String?                  @unique
  estado                   Boolean                  @default(true)
  creado_en                DateTime                 @default(now()) @map("creado_en")
  actualizado_en           DateTime                 @updatedAt @map("actualizado_en")
  usuario_roles            UsuarioRol[]
  orden_trabajo_jefe_asigna OrdenTrabajo[]          @relation("JefeAsigna")
  orden_trabajo_usuario    OrdenTrabajoUsuario[]
  tarea_realizada          TareaRealizada[]
  asistencia               Asistencia[]
  comentario_tarea         ComentarioTarea[]        @relation("UsuarioComentario") // Relación nombrada para evitar ambigüedades

  @@map("usuarios")
}

model UsuarioRol {
  id          Int      @id @default(autoincrement())
  usuario_id  Int      @map("usuario_id")
  rol_id      Int      @map("rol_id")
  estado      Boolean  @default(true)
  creado_en   DateTime @default(now()) @map("creado_en")
  actualizado_en DateTime @updatedAt @map("actualizado_en")  // NUEVO CAMPO
  usuario     Usuario  @relation(fields: [usuario_id], references: [id], onDelete: NoAction, onUpdate: Cascade)
  rol         Rol      @relation(fields: [rol_id], references: [id], onDelete: NoAction, onUpdate: Cascade)

  @@unique([usuario_id, rol_id], name: "usuario_roles_usuario_id_rol_id_key")
  @@map("usuario_roles")
  @@index([usuario_id], name: "idx_usuario_roles_usuario_id")  // Índice para optimizar búsqueda por usuario
  @@index([rol_id], name: "idx_usuario_roles_rol_id")  // Índice para optimizar búsqueda por rol
  @@index([estado], name: "idx_usuario_roles_estado")  // Índice para filtrar por estado activo
}

model Empresa {
  id             Int           @id @default(autoincrement())
  nombre         String        @unique
  estado         Boolean       @default(true)
  creado_en      DateTime      @default(now()) @map("creado_en")
  actualizado_en DateTime      @updatedAt @map("actualizado_en")
  embarcaciones  Embarcacion[]

  @@map("empresas")
}

model Embarcacion {
  id_embarcacion          Int                      @id @default(autoincrement()) @map("id_embarcacion")
  empresa_id              Int                      @map("empresa_id")
  nombre                  String                   @map("nombre")
  qr_code                 String?                   @unique @map("qr_code")
  estado                  Boolean                  @default(true) @map("estado")
  creado_en               DateTime                 @default(now()) @map("creado_en")
  actualizado_en          DateTime                 @updatedAt @map("actualizado_en")
  empresa                 Empresa                  @relation(fields: [empresa_id], references: [id], onDelete: NoAction, onUpdate: Cascade)
  historial_puertos       HistorialPuerto[]
  embarcacion_sistemas    EmbarcacionSistema[]
  asistencia              Asistencia[]
  orden_trabajos          OrdenTrabajo[]           @relation("EmbarcacionOrdenTrabajo") // Relación inversa agregada

  @@map("embarcacion")
}

model Puerto {
  id_puerto        Int                @id @default(autoincrement()) @map("id_puerto")
  nombre           String             @unique @map("nombre")
  ubicacion        String?            @map("ubicacion")
  estado           Boolean            @default(true) @map("estado")
  creado_en        DateTime           @default(now()) @map("creado_en")
  actualizado_en   DateTime           @updatedAt @map("actualizado_en")
  historial_puertos HistorialPuerto[]
  orden_trabajo     OrdenTrabajo[]

  @@map("puerto")
}

model HistorialPuerto {
  id_historial    Int         @id @default(autoincrement()) @map("id_historial")
  embarcacion_id  Int         @map("embarcacion_id")
  puerto_id       Int         @map("puerto_id")
  fecha_llegada   DateTime    @map("fecha_llegada")
  fecha_salida    DateTime?   @map("fecha_salida")
  estado          Boolean     @default(true) @map("estado")
  creado_en       DateTime    @default(now()) @map("creado_en")
  actualizado_en  DateTime    @updatedAt @map("actualizado_en")
  embarcacion     Embarcacion @relation(fields: [embarcacion_id], references: [id_embarcacion], onDelete: NoAction, onUpdate: Cascade)
  puerto          Puerto      @relation(fields: [puerto_id], references: [id_puerto], onDelete: NoAction, onUpdate: Cascade)

  @@unique([embarcacion_id, puerto_id, fecha_llegada], name: "historial_puertos_unique")
  @@index([embarcacion_id], name: "idx_embarcacion")
  @@index([puerto_id], name: "idx_puerto")
  @@index([fecha_salida], name: "idx_fecha_salida")
  
  @@map("historial_puertos")
}

model Sistema {
  id_sistema          Int                  @id @default(autoincrement()) @map("id_sistema")
  nombre_sistema      String               @unique @map("nombre_sistema")
  descripcion         String?
  estado              Boolean              @default(true) @map("estado")
  creado_en           DateTime             @default(now()) @map("creado_en")
  actualizado_en      DateTime             @updatedAt @map("actualizado_en")
  sistema_partes      SistemaParte[]       // Relación inversa con SistemaParte
  embarcacion_sistemas EmbarcacionSistema[]

  @@map("sistema")
  @@index([estado], name: "idx_sistema_estado")
}

model Parte {
  id_parte                       Int                     @id @default(autoincrement()) @map("id_parte")
  nombre_parte                   String                  @map("nombre_parte") @unique
  estado                         Boolean                 @default(true) @map("estado")
  creado_en                      DateTime                @default(now()) @map("creado_en")
  actualizado_en                 DateTime                @updatedAt @map("actualizado_en")
  sistema_partes                 SistemaParte[]          // Relación inversa con SistemaParte
  orden_trabajo_parte            OrdenTrabajoParte[]
  embarcacion_sistema_partes     EmbarcacionSistemaParte[]

  @@map("parte")
}

model SistemaParte {
  id_sistema_parte Int      @id @default(autoincrement()) @map("id_sistema_parte")
  id_sistema       Int      @map("id_sistema")
  id_parte         Int      @map("id_parte")
  estado           Boolean  @default(true) @map("estado") // Nuevo campo
  creado_en        DateTime @default(now()) @map("creado_en")
  actualizado_en   DateTime @updatedAt @map("actualizado_en")
  
  sistema          Sistema  @relation(fields: [id_sistema], references: [id_sistema], onDelete: Cascade, onUpdate: Cascade)
  parte            Parte    @relation(fields: [id_parte], references: [id_parte], onDelete: Cascade, onUpdate: Cascade)

  @@unique([id_sistema, id_parte], name: "sistema_parte_unique")
  @@map("sistema_parte")
  @@index([id_sistema], name: "idx_sistema_parte_sistema_id")
  @@index([id_parte], name: "idx_sistema_parte_parte_id")
  @@index([estado], name: "idx_sistema_parte_estado")
}

model EmbarcacionSistema {
  id_embarcacion_sistema Int              @id @default(autoincrement()) @map("id_embarcacion_sistema")
  id_embarcacion        Int              @map("id_embarcacion")
  id_sistema            Int              @map("id_sistema")
  estado_sistema        Boolean          @default(true) @map("estado_sistema")
  creado_en             DateTime         @default(now()) @map("creado_en")
  actualizado_en        DateTime         @updatedAt @map("actualizado_en")
  embarcacion           Embarcacion      @relation(fields: [id_embarcacion], references: [id_embarcacion], onDelete: NoAction, onUpdate: Cascade)
  sistema               Sistema          @relation(fields: [id_sistema], references: [id_sistema], onDelete: NoAction, onUpdate: Cascade)
  embarcacion_sistema_partes EmbarcacionSistemaParte[] // Relación inversa con EmbarcacionSistemaParte

  @@unique([id_embarcacion, id_sistema], name: "embarcacion_sistema_unique")
  @@map("embarcacion_sistema")
  @@index([id_embarcacion], name: "idx_embarcacion_sistema_embarcacion_id")
  @@index([id_sistema], name: "idx_embarcacion_sistema_sistema_id")
  @@index([estado_sistema], name: "idx_embarcacion_sistema_estado_sistema")
}


model EmbarcacionSistemaParte {
  id_embarcacion_sistema_parte Int  @id @default(autoincrement()) @map("id_embarcacion_sistema_parte")
  id_embarcacion_sistema       Int  @map("id_embarcacion_sistema")
  id_parte                     Int? @map("id_parte") // Ahora es opcional
  estado                       Boolean @default(true) @map("estado")
  creado_en                    DateTime @default(now()) @map("creado_en")
  actualizado_en               DateTime @updatedAt @map("actualizado_en")

  embarcacion_sistema          EmbarcacionSistema @relation(fields: [id_embarcacion_sistema], references: [id_embarcacion_sistema], onDelete: Cascade, onUpdate: Cascade)
  parte                        Parte?             @relation(fields: [id_parte], references: [id_parte], onDelete: Cascade, onUpdate: Cascade) // Ahora es opcional

  tipo_trabajo_emb_sist_par    TipoTrabajoEmbarcacionSistemaParte[] @relation("ESPtoTTESP") // Back relation

  @@unique([id_embarcacion_sistema, id_parte], name: "emb_sis_par_unique")
  @@map("embarcacion_sistema_parte")
  @@index([id_embarcacion_sistema], name: "idx_esp_es")
  @@index([id_parte], name: "idx_esp_par")
}


model TipoTrabajo {
  id_tipo_trabajo Int            @id @default(autoincrement()) @map("id_tipo_trabajo")
  nombre_trabajo  String         @unique @map("nombre_trabajo")
  descripcion     String?        @map("descripcion")
  estado          Boolean        @default(true) @map("estado")
  creado_en       DateTime       @default(now()) @map("creado_en")
  actualizado_en  DateTime       @updatedAt @map("actualizado_en")
  orden_trabajo   OrdenTrabajo[]
  tipo_trabajo_emb_sist_par  TipoTrabajoEmbarcacionSistemaParte[] @relation("TTESPtoTT") // Back relation para el nuevo modelo

  @@map("tipo_trabajo")
  @@index([estado], name: "idx_tipotrab_estado")
}

model OrdenTrabajo {
  id_orden_trabajo        Int                 @id @default(autoincrement()) @map("id_orden_trabajo")
  id_tipo_trabajo         Int                 @map("id_tipo_trabajo")
  id_embarcacion          Int                 @map("id_embarcacion")
  id_puerto               Int                 @map("id_puerto")
  id_jefe_asigna          Int                 @map("id_jefe_asigna")
  fecha_asignacion        DateTime            @map("fecha_asignacion")
  estado                  EstadoOrdenTrabajo  @default(pendiente) @map("estado")
  comentarios             String?             @map("comentarios")
  motorista               String?             @map("motorista")
  supervisor              String?             @map("supervisor")
  codigo                  String?             @unique @map("codigo")
  creado_en               DateTime            @default(now()) @map("creado_en")
  actualizado_en          DateTime            @updatedAt @map("actualizado_en")

  tipo_trabajo            TipoTrabajo         @relation(fields: [id_tipo_trabajo], references: [id_tipo_trabajo], onDelete: NoAction, onUpdate: Cascade)
  embarcacion             Embarcacion         @relation("EmbarcacionOrdenTrabajo", fields: [id_embarcacion], references: [id_embarcacion], onDelete: NoAction, onUpdate: Cascade)
  puerto                  Puerto              @relation(fields: [id_puerto], references: [id_puerto], onDelete: NoAction, onUpdate: Cascade)
  jefe_asigna             Usuario             @relation("JefeAsigna", fields: [id_jefe_asigna], references: [id], onDelete: NoAction, onUpdate: Cascade)

  orden_trabajo_usuario   OrdenTrabajoUsuario[]
  orden_trabajo_sistemas  OrdenTrabajoSistema[]
  asistencia              Asistencia[]

  @@map("orden_trabajo")
  @@index([id_tipo_trabajo], name: "idx_ot_tt")
  @@index([id_embarcacion], name: "idx_ot_embarcacion")
  @@index([id_puerto], name: "idx_ot_pto")
  @@index([id_jefe_asigna], name: "idx_ot_jefe")
  @@index([estado], name: "idx_ot_est")
}

model OrdenTrabajoUsuario {
  id_orden_trabajo_usuario Int         @id @default(autoincrement()) @map("id_orden_trabajo_usuario")
  id_orden_trabajo        Int         @map("id_orden_trabajo")
  id_usuario              Int         @map("id_usuario")
  rol_en_orden            RolEnOrden? @map("rol_en_orden")
  observaciones           String?     @map("observaciones")
  estado                  Boolean     @default(true) @map("estado") // Nuevo campo para activación/desactivación
  creado_en               DateTime    @default(now()) @map("creado_en")
  actualizado_en          DateTime    @updatedAt @map("actualizado_en")
  orden_trabajo           OrdenTrabajo @relation(fields: [id_orden_trabajo], references: [id_orden_trabajo], onDelete: NoAction, onUpdate: Cascade)
  usuario                 Usuario     @relation(fields: [id_usuario], references: [id], onDelete: NoAction, onUpdate: Cascade)

  @@unique([id_orden_trabajo, id_usuario], name: "orden_trabajo_usuario_unique")
  @@map("orden_trabajo_usuario")
  
  // Índices adicionales
  @@index([id_orden_trabajo], name: "idx_orden_trabajo_usuario_orden_trabajo")
  @@index([id_usuario], name: "idx_orden_trabajo_usuario_usuario")
}

model OrdenTrabajoSistema {
  id_orden_trabajo_sistema  Int                 @id @default(autoincrement())
  id_orden_trabajo          Int                 // FK a la orden principal
  id_tipo_trabajo_embarcacion_sistema_parte     Int // Nuevo “único” FK
  
  estado        EstadoOrdenTrabajo @default(pendiente)
  observaciones String?
  avance        Int @default(0)
  materiales    String?
  proximo_abordaje String?
  creado_en     DateTime @default(now())
  actualizado_en DateTime @updatedAt

  /// Relaciones
  orden_trabajo  OrdenTrabajo @relation(fields: [id_orden_trabajo], references: [id_orden_trabajo], onDelete: NoAction, onUpdate: Cascade)
  // Relación al join “TipoTrabajoEmbarcacionSistemaParte”
  tipo_trabajo_embarcacion_sistema_parte TipoTrabajoEmbarcacionSistemaParte @relation("TTESPtoOTSIS", fields: [id_tipo_trabajo_embarcacion_sistema_parte], references: [id_tipo_trabajo_embarcacion_sistema_parte], onDelete: NoAction, onUpdate: Cascade)

  // Resto de relaciones que ya tenías (detalles, fotos, etc.)
  detalle                 OrdenTrabajoSistemaDetalle?
  fotos                   OrdenTrabajoSistemaFoto[]
  orden_trabajo_parte     OrdenTrabajoParte[]

  // Ajustar la constraint única a lo que ahora tienes:
  @@unique([id_orden_trabajo, id_tipo_trabajo_embarcacion_sistema_parte], name: "orden_trabajo_sistema_unique")
  @@map("orden_trabajo_sistema")
  // Índices
  @@index([id_orden_trabajo], name: "idx_otsis_ot")
  @@index([estado], name: "idx_otsis_est")
}


model OrdenTrabajoSistemaDetalle {
  id_detalle               Int  @id @default(autoincrement()) @map("id_detalle")
  id_orden_trabajo_sistema Int  @unique @map("id_orden_trabajo_sistema")
  fallas                   String? @map("fallas")
  causas                   String? @map("causas")
  solucion                 String? @map("solucion")
  pendiente                String? @map("pendiente")
  creado_en                DateTime @default(now()) @map("creado_en")

  orden_trabajo_sistema    OrdenTrabajoSistema @relation(fields: [id_orden_trabajo_sistema], references: [id_orden_trabajo_sistema], onDelete: Cascade, onUpdate: Cascade)

  @@map("orden_trabajo_sistema_detalle")
}

model OrdenTrabajoSistemaFoto {
  id_foto                   Int     @id @default(autoincrement()) @map("id_foto")
  id_orden_trabajo_sistema  Int     @map("id_orden_trabajo_sistema")
  url                       String  @map("url") // URL de la foto
  creado_en                 DateTime @default(now()) @map("creado_en")

  orden_trabajo_sistema     OrdenTrabajoSistema @relation(fields: [id_orden_trabajo_sistema], references: [id_orden_trabajo_sistema], onDelete: Cascade, onUpdate: Cascade)

  @@map("orden_trabajo_sistema_foto")
  @@index([id_orden_trabajo_sistema], name: "idx_otsf_otsis")
}

model OrdenTrabajoParte {
  id_orden_trabajo_parte Int                @id @default(autoincrement()) @map("id_orden_trabajo_parte")
  id_orden_trabajo_sistema Int             @map("id_orden_trabajo_sistema")
  id_parte               Int                @map("id_parte")
  estado                 EstadoOrdenTrabajo @default(pendiente) @map("estado")
  creado_en              DateTime           @default(now()) @map("creado_en")
  actualizado_en         DateTime           @updatedAt @map("actualizado_en")
  orden_trabajo_sistema  OrdenTrabajoSistema @relation(fields: [id_orden_trabajo_sistema], references: [id_orden_trabajo_sistema], onDelete: NoAction, onUpdate: Cascade)
  parte                   Parte              @relation(fields: [id_parte], references: [id_parte], onDelete: NoAction, onUpdate: Cascade)
  

  @@unique([id_orden_trabajo_sistema, id_parte], name: "orden_trabajo_parte_unique")
  @@map("orden_trabajo_parte")
}

model TipoTrabajoEmbarcacionSistemaParte {
  id_tipo_trabajo_embarcacion_sistema_parte Int  @id @default(autoincrement()) @map("id_tt_esp")

  id_tipo_trabajo                           Int  @map("id_tipo_trabajo")
  id_embarcacion_sistema_parte             Int  @map("id_esp") // acortamos nombres de columnas e índices

  estado                                    Boolean @default(true) @map("estado")
  creado_en                                 DateTime @default(now()) @map("creado_en")
  actualizado_en                            DateTime @updatedAt @map("actualizado_en")

  /// Relación a "TipoTrabajo" con la back-rel
  tipo_trabajo              TipoTrabajo @relation("TTESPtoTT", fields: [id_tipo_trabajo], references: [id_tipo_trabajo], onDelete: Cascade, onUpdate: Cascade)

  /// Relación a "EmbarcacionSistemaParte" con la back-rel
  embarcacion_sistema_parte EmbarcacionSistemaParte @relation("ESPtoTTESP", fields: [id_embarcacion_sistema_parte], references: [id_embarcacion_sistema_parte], onDelete: Cascade, onUpdate: Cascade)

  /// Back-rel a "OrdenTrabajoSistema"
  orden_trabajo_sistemas OrdenTrabajoSistema[] @relation("TTESPtoOTSIS")

  @@unique([id_tipo_trabajo, id_embarcacion_sistema_parte], name: "unq_tt_esp")
  @@map("tipo_trabajo_esp") // nombre acortado para la tabla
  @@index([id_tipo_trabajo], name: "idx_tt_esp_tt")
  @@index([id_embarcacion_sistema_parte], name: "idx_tt_esp_esp")
}

model Asistencia {
  id_asistencia        Int              @id @default(autoincrement()) @map("id_asistencia")
  id_usuario           Int              @map("id_usuario")
  id_embarcacion       Int              @map("id_embarcacion")
  id_orden_trabajo     Int?             @map("id_orden_trabajo")
  fecha_hora           DateTime         @map("fecha_hora")
  latitud              Decimal?         @db.Decimal(10, 6) @map("latitud")
  longitud             Decimal?         @db.Decimal(10, 6) @map("longitud")
  tipo                 TipoAsistencia   @map("tipo")
  creado_en            DateTime         @default(now()) @map("creado_en")
  usuario              Usuario          @relation(fields: [id_usuario], references: [id], onDelete: NoAction, onUpdate: Cascade)
  embarcacion          Embarcacion      @relation(fields: [id_embarcacion], references: [id_embarcacion], onDelete: NoAction, onUpdate: Cascade)
  orden_trabajo        OrdenTrabajo?    @relation(fields: [id_orden_trabajo], references: [id_orden_trabajo], onDelete: SetNull, onUpdate: Cascade)
  @@map("asistencia")
}

model TareaRealizada {
  id_tarea_realizada    Int              @id @default(autoincrement()) @map("id_tarea_realizada")
  id_usuario            Int              @map("id_usuario")
  id_tarea              Int              @map("id_tarea")
  fecha_hora            DateTime         @map("fecha_hora")
  comentarios           String?          @map("comentarios")
  creado_en             DateTime         @default(now()) @map("creado_en")
  usuario               Usuario           @relation(fields: [id_usuario], references: [id], onDelete: NoAction, onUpdate: Cascade)
  comentario_tarea      ComentarioTarea[] @relation("ComentarioToTareaRealizada") // Relación nombrada

  @@map("tarea_realizada")
}

model ComentarioTarea {
  id_comentario_tarea Int             @id @default(autoincrement()) @map("id_comentario_tarea")
  id_tarea_realizada  Int             @map("id_tarea_realizada")
  id_usuario          Int             @map("id_usuario")
  comentario          String          @map("comentario")
  creado_en           DateTime        @default(now()) @map("creado_en")
  tarea_realizada     TareaRealizada  @relation("ComentarioToTareaRealizada", fields: [id_tarea_realizada], references: [id_tarea_realizada], onDelete: Cascade, onUpdate: Cascade)
  usuario             Usuario         @relation("UsuarioComentario", fields: [id_usuario], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("comentario_tarea")
}